(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{283:function(t,a,n){"use strict";n.r(a);var s=n(14),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),a("h2",{attrs:{id:"什么是java异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是java异常"}},[t._v("#")]),t._v(" 什么是java异常")]),t._v(" "),a("p",[t._v("Java中的异常（Exception）是指程序运行时发生的意外或异常情况，例如除数为0、空指针等，它会导致程序执行失败或无法正常运行。Java提供了一种机制来处理这些异常，以保证程序的健壮性和可靠性。")]),t._v(" "),a("p",[t._v("在Java中，所有的异常都是从Throwable类派生而来的，包括Error和Exception两种类型。其中，Error表示系统错误或资源耗尽等不可恢复的情况，一般不需要捕获和处理。而Exception则表示程序运行时可能出现的各种异常情况，它又分为两种类型：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Checked Exception（可检查异常）：这种异常是在编译时就可以被检查到的异常，必须在程序中显式地捕获和处理，否则会导致编译错误。例如IOException、SQLException等。")])]),t._v(" "),a("li",[a("p",[t._v("Unchecked\nException（不可检查异常）：这种异常是在运行时才能被检查到的异常，不需要在程序中显式地捕获和处理，如果不处理，它们会被传递到调用栈上，直到被JVM捕获为止。例如NullPointerException、ArrayIndexOutOfBoundsException等。")])])]),t._v(" "),a("p",[t._v("Java中的异常处理机制包括try-catch-finally语句和throws关键字。try块中包含可能会抛出异常的代码，catch块用于捕获并处理异常，finally块中的代码无论是否出现异常都会被执行。而throws关键字用于在方法声明中指定该方法可能会抛出的异常，以便调用方可以进行相应的处理。")]),t._v(" "),a("p",[t._v("通过合理地使用异常处理机制，可以让程序在遇到异常情况时有针对性地进行处理，以提高程序的健壮性和可靠性。")]),t._v(" "),a("h2",{attrs:{id:"常见的异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的异常"}},[t._v("#")]),t._v(" 常见的异常")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("NullPointerException（空指针异常）：当程序试图访问空对象时，就会抛出此异常。")])]),t._v(" "),a("li",[a("p",[t._v("IndexOutOfBoundsException（下标越界异常）：当程序试图访问数组或集合中不存在的元素时，就会抛出此异常。")])]),t._v(" "),a("li",[a("p",[t._v("IllegalArgumentException（非法参数异常）：当程序接收到非法或不合适的参数时，就会抛出此异常。")])]),t._v(" "),a("li",[a("p",[t._v("ClassCastException（类型转换异常）：当程序试图进行不合法的类型转换时，就会抛出此异常。")])]),t._v(" "),a("li",[a("p",[t._v("IOException（输入输出异常）：当程序在进行输入输出操作时遇到异常情况，就会抛出此异常。")])]),t._v(" "),a("li",[a("p",[t._v("ArithmeticException（算术异常）：当程序在进行数学运算时出现异常情况，例如除以0等，就会抛出此异常。")])])]),t._v(" "),a("h2",{attrs:{id:"如何处理异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何处理异常"}},[t._v("#")]),t._v(" 如何处理异常")]),t._v(" "),a("p",[t._v("在Java中，通常使用try-catch语句来处理异常。try语句块中包含可能会引发异常的代码，catch语句块中包含异常处理的代码。当try语句块中的代码引发异常时，程序将跳转到catch语句块中，并执行相应的异常处理代码。")]),t._v(" "),a("p",[t._v("以下是一个基本的try-catch语句的示例：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可能会抛出异常的代码")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExceptionType")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异常处理代码")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("其中，ExceptionType是要捕获的异常类型，可以是Java中定义的任何异常类型，例如NullPointerException、IOException等。")]),t._v(" "),a("p",[t._v("在catch语句块中，可以根据具体的业务需求和代码逻辑，编写相应的异常处理代码。通常，异常处理代码包括打印异常信息、记录日志、恢复程序运行状态等。")]),t._v(" "),a("p",[t._v("除了try-catch语句外，Java还提供了一些其他的异常处理机制，例如finally块、throw语句和throws关键字等。开发人员可以根据具体的需求和业务场景，选择合适的异常处理机制，以提高程序的稳定性和可靠性。")]),t._v(" "),a("h2",{attrs:{id:"finally-和return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finally-和return"}},[t._v("#")]),t._v(" finally 和return")]),t._v(" "),a("p",[t._v("在Java中，finally块是一个可选的代码块，用于在try-catch语句执行后无论是否发生异常都会执行的代码。通常，finally块中包含一些必须执行的清理代码，例如关闭文件、释放资源等。")]),t._v(" "),a("p",[t._v("当try-catch语句块中包含return语句时，finally块也会在return语句执行之前执行。这意味着，无论try语句块中是否发生异常，finally块中的代码都将执行。如果finally块中也包含return语句，它将会覆盖之前的return语句，成为最终的返回值。")]),t._v(" "),a("p",[t._v("以下是一个示例代码，演示了finally块和return语句的交互：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("在上面的代码中，无论try语句块中是否发生异常，finally块中的return语句都将覆盖之前的return语句。因此，该方法的返回值将为3，而不是1或2。")]),t._v(" "),a("p",[t._v("需要注意的是，在使用finally块时，应避免在其中包含过多的代码，以免影响程序的性能和可读性。同时，在编写包含finally块的代码时，也应该考虑到其中可能出现的异常情况，以确保程序的正确性和健壮性。")])])}),[],!1,null,null,null);a.default=r.exports}}]);