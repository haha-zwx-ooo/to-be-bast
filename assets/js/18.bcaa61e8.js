(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{292:function(a,s,t){"use strict";t.r(s);var n=t(14),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),s("blockquote",[s("h2",{attrs:{id:"什么是类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是类"}},[a._v("#")]),a._v(" 什么是类?")])]),a._v(" "),s("p",[a._v("Java类是一种封装数据和行为的蓝图，它定义了一个对象的属性和方法。在Java编程中，所有的代码都是写在类中的。类可以看作是对象的模板，它描述了对象所拥有的属性和方法。")]),a._v(" "),s("p",[a._v("在Java中，对象是基于类创建的，每个对象都是该类的一个实例。类定义了对象可以执行的操作，也定义了对象的数据类型。通过创建一个类，您可以实例化多个对象，每个对象都具有相同的属性和方法。")]),a._v(" "),s("p",[a._v("类的定义通常包括以下内容：")]),a._v(" "),s("ol",[s("li",[a._v("类名：类的名称，通常以大写字母开头。")]),a._v(" "),s("li",[a._v("属性：类的特性，也称为字段或成员变量。")]),a._v(" "),s("li",[a._v("方法：类的操作，也称为函数或成员方法。")]),a._v(" "),s("li",[a._v("构造函数：类的初始化方法，用于在创建对象时初始化对象的属性。")])]),a._v(" "),s("p",[a._v("在Java中，类是一种重要的编程概念，它可以帮助您组织代码、提高代码的可重用性和可维护性。")]),a._v(" "),s("hr"),a._v(" "),s("blockquote",[s("h2",{attrs:{id:"如何创建一个类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何创建一个类"}},[a._v("#")]),a._v(" 如何创建一个类")])]),a._v(" "),s("p",[a._v("在Java中，创建一个类需要以下几个步骤：")]),a._v(" "),s("p",[a._v("1.声明类：在Java中，使用关键字class声明一个类。类的名称应该以大写字母开头，遵循驼峰命名规则。例如，如果您要创建一个名为Person的类，可以使用以下代码：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 类的代码在这里")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("2.定义属性：定义类的属性，也称为成员变量或字段。属性用于存储对象的状态。您可以在类中定义任意数量的属性，每个属性由类型和名称组成。例如，为Person类定义一个名为name的字符串属性和一个名为age的整数属性：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("3.定义方法：定义类的方法，也称为函数或成员方法。方法用于定义类的行为。您可以在类中定义任意数量的方法，每个方法由返回类型、方法名称和参数列表组成。例如，为Person类定义一个名为printInfo的方法，用于打印对象的名称和年龄：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Name: "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Age: "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("4.创建对象：通过调用类的构造函数创建对象。构造函数是一种特殊的方法，用于初始化新对象的属性。例如，为Person类定义一个带有参数的构造函数，用于初始化对象的属性：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Name: "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Age: "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("5.使用对象：使用创建的对象来调用类的方法和访问属性。例如，创建一个名为person的Person对象并调用它的printInfo方法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" person"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"John Doe"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("hr"),a._v(" "),s("blockquote",[s("h2",{attrs:{id:"java有几种类别的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java有几种类别的类"}},[a._v("#")]),a._v(" java有几种类别的类")])]),a._v(" "),s("p",[a._v("在Java中，类可以分为以下几种类别：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("普通类（Regular Class）：普通类是最常见的类别，用于封装数据和行为，描述具有特定属性和方法的对象。您可以通过创建对象来使用普通类中的方法和属性。")])]),a._v(" "),s("li",[s("p",[a._v("抽象类（Abstract Class）：抽象类是一种不能被实例化的类，它可以包含抽象方法和非抽象方法。抽象方法是一种没有实现的方法，它只包含方法声明，没有方法体。抽象类用于描述一类对象的通用行为，具体的实现则由其子类完成。")])]),a._v(" "),s("li",[s("p",[a._v("接口（Interface）：接口是一种完全抽象的类别，它只包含常量和方法的声明，没有方法体。接口用于定义对象的行为，实现接口的类必须实现接口中定义的所有方法。")])]),a._v(" "),s("li",[s("p",[a._v("枚举类（Enum Class）：枚举类是一种特殊的类别，用于描述具有有限数量的常量值的对象。枚举类的每个实例都是枚举类型中的一个常量，您可以使用枚举类型的常量来表示特定的对象状态。")])]),a._v(" "),s("li",[s("p",[a._v("内部类（Inner Class）：内部类是定义在另一个类中的类，它可以访问外部类的私有属性和方法。内部类可以分为成员内部类、静态内部类、局部内部类和匿名内部类等几种类型。")])])]),a._v(" "),s("blockquote",[s("h2",{attrs:{id:"java中类修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java中类修饰符"}},[a._v("#")]),a._v(" Java中类修饰符")])]),a._v(" "),s("p",[a._v("在Java中，类修饰符（Class Modifier）是用于限定类的访问权限和特性的关键字。Java中常见的类修饰符有以下几种：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("public：public是最常用的类修饰符，表示该类可以被任何类访问。如果不加任何修饰符，默认为包级私有（Package-private）。")])]),a._v(" "),s("li",[s("p",[a._v("abstract：abstract表示该类是抽象类，不能被实例化。抽象类通常用于描述一类对象的通用行为，具体的实现由其子类完成。")])]),a._v(" "),s("li",[s("p",[a._v("final：final表示该类是最终类，不能被继承。最终类通常用于保证类的稳定性和安全性。")])]),a._v(" "),s("li",[s("p",[a._v("strictfp：strictfp表示该类使用精确的浮点计算规则。在Java中，浮点计算存在精度问题，使用strictfp可以确保在不同平台上得到相同的结果。")])])]),a._v(" "),s("p",[a._v("除了上述常见的类修饰符外，Java还有一些其他的类修饰符，例如：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("protected：protected表示该类只能被本包或其子类访问。")])]),a._v(" "),s("li",[s("p",[a._v("private：private表示该类只能被本类访问。")])]),a._v(" "),s("li",[s("p",[a._v("static：static表示该类是静态类，只能访问静态方法和属性。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);